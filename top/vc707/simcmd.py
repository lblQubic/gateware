import json

class simcmd():
	def __init__(self):
		pass

	def parse(self,starttime,filename_cmdsimlist='cmdsimlist.vh',filename_mapping='reg_mapping_old_new.json'):
		cmdsimlist=[]
		f=open(filename_cmdsimlist,'r')
		lines=f.readlines()
		f.close()
		with open(filename_mapping) as jfile:
			oldnew=json.load(jfile)
		for i in range(len(lines)):
			t=[starttime+2*i]
			cad=lines[i].strip('\n').split(',')
			cad[1]=oldnew[cad[1]]['new'] if cad[1] in oldnew else cad[1]
			cmdsimlist.append(t+cad)
		return cmdsimlist

	def veri(self,cmdsimlist):
		simvh='''
always @(posedge lb_clk) begin
%s
%s
end'''
		tcmd1='''if (lbclkcnt==%d) begin lb_wctrl<=%s; lb_addr<=%s; lb_wdata<=%s; end'''
		tcmd2='''(lbclkcnt==%d)'''
		cmd1=[]
		cmd2=[]
		for (time,ctrl,addr,data) in cmdsimlist:
			cmd1.append(tcmd1%(time,ctrl,addr,data))
			cmd2.append(tcmd2%(time))
		print(simvh%(('\nelse '.join(cmd1)),('lb_wvalid='+'\n|'.join(cmd2)+';')))

if __name__=="__main__":
	'''cmdsimlist=[[16,"8'h01","24'haf","32'h0"]
			,[18,"8'h01","24'hac","32'h0"]
			,[20,"8'h01","24'hac","32'h1"]
			,[22,"8'h01","24'hac","32'h0"]
			#,["8'h01","24'h50000","32'hff"]
			,[24,"8'h01","24'hba","32'h0"]
			,[26,"8'h01","24'hbb","32'h0"]
			,[28,"8'h01","24'hbc","32'h0"]
			,[30,"8'h01","24'hbd","32'h0"]
			,[32,"8'h01","24'h38000","32'h0"]
			,[34,"8'h01","24'h38001","32'h2810000"]
			,[36,"8'h01","24'h38002","32'h9110000"]
			,[38,"8'h01","24'h38003","32'h112d0000"]
			,[40,"8'h01","24'h38004","32'h17bd0000"]
			,[42,"8'h01","24'h38005","32'h1a3f0000"]
			,[44,"8'h01","24'h38006","32'h1a3f0000"]
			,[46,"8'h01","24'h38007","32'h1a3f0000"]
			,[48,"8'h01","24'h38008","32'h1a3f0000"]
			,[50,"8'h01","24'h38009","32'h1a3f0000"]
			,[52,"8'h01","24'h3800a","32'h1a3f0000"]
			,[54,"8'h01","24'h3800b","32'h1a3f0000"]
			,[56,"8'h01","24'h3800c","32'h1a3f0000"]
			,[58,"8'h01","24'h3800d","32'h1a3f0000"]
			,[60,"8'h01","24'h3800e","32'h1a3f0000"]
			,[62,"8'h01","24'h3800f","32'h1a3f0000"]
			,[64,"8'h01","24'h38010","32'h17bd0000"]
			,[66,"8'h01","24'h38011","32'h112d0000"]
			,[68,"8'h01","24'h38012","32'h9110000"]
			,[70,"8'h01","24'h38013","32'h2810000"]
			,[72,"8'h01","24'hc0000","32'h4db60000"]
			,[74,"8'h01","24'hc0001","32'h4db60000"]
			,[76,"8'h01","24'hc0002","32'h4db60000"]
			,[78,"8'h01","24'hc0003","32'h4db60000"]
			,[80,"8'h01","24'hc0004","32'h4db60000"]
			,[82,"8'h01","24'hc0005","32'h4db60000"]
			,[84,"8'h01","24'hc0006","32'h4db60000"]
			,[86,"8'h01","24'hc0007","32'h4db60000"]
			,[88,"8'h01","24'hc0008","32'h4db60000"]
			,[90,"8'h01","24'hc0009","32'h4db60000"]
			,[92,"8'h01","24'hc000a","32'h4db60000"]
			,[94,"8'h01","24'hc000b","32'h4db60000"]
			,[96,"8'h01","24'hc000c","32'h4db60000"]
			,[98,"8'h01","24'hc000d","32'h4db60000"]
			,[100,"8'h01","24'hc000e","32'h4db60000"]
			,[102,"8'h01","24'hc000f","32'h4db60000"]
			,[104,"8'h01","24'hc0010","32'h4db60000"]
			,[106,"8'h01","24'hc0011","32'h4db60000"]
			,[108,"8'h01","24'hc0012","32'h4db60000"]
			,[110,"8'h01","24'hc0013","32'h4db60000"]
			#,["8'h01","24'h7","32'h16d"]
			,[112,"8'h01","24'had","32'h16d"]
			#,["8'h01","24'h10","32'h16d"]
			,[114,"8'h01","24'h80000","32'h0"]
			,[116,"8'h01","24'h80001","32'h140"]
			,[118,"8'h01","24'h80002","32'hd6b0a4"]
			,[120,"8'h01","24'h80003","32'h0"]
			,[122,"8'h01","24'h80004","32'h308"]
			,[124,"8'h01","24'h80005","32'h140"]
			,[126,"8'h01","24'h80006","32'hd6b0a4"]
			,[128,"8'h01","24'h80007","32'h0"]
			,[130,"8'h01","24'h80008","32'h5a0c"]
			,[132,"8'h01","24'h80009","32'h40003e80"]
			,[134,"8'h01","24'h8000a","32'h0"]
			,[136,"8'h01","24'h8000b","32'h0"]
			,[138,"8'h01","24'hae","32'h0"]
			,[140,"8'h01","24'hae","32'h1"]
			,[142,"8'h01","24'hae","32'h0"]
			]
			'''
	a=simcmd()
	a.veri(a.parse(starttime=16))
	#a.veri(cmdsimlist)

